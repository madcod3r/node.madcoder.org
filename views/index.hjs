<html lang="en">

	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<meta name="description" content="">

		<title>üçø Movie Time</title>

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

		<style type="text/css">

			body {
				font-family: monospace;
			}

			.url:hover {
    			text-decoration: underline;
    			cursor: pointer;
			}

			::cue {
				background-color: black;
				color: white;
			}

			::cue(:lang(ru)) {
				color: yellow;
			}
		</style>

	</head>

	<body>

		<video autoplay src="" height="360px" controls >
			<track label="English0" kind="subtitles" srcLang="en0" src="subtitles/en.vtt" default />
			<track label="English1" kind="subtitles" srcLang="en1" src="subtitles/ru.vtt" default />
		</video>

		<form>
			<label>Upload subtitles</label>
			<input id="upload_subs" name="subs" type="file" multiple />
		</form>
		<div id="upload_processing"></div>
		<ul id="uploaded_subs"></ul>


		<p>Samples Torrents (Magnet links):</p>

		<ul id="demo_magnets">
			<li><span class="magnet url">FA5D8D4B79A3FAFA3A09F4E6BED813271E0D2496</span> - <span>The Wire [S01-05] (2002-2008) mp4 1080p <a href="https://thepiratebay.org/description.php?id=16657300" target="_blank">link</a></span></li>
		</ul>

		<p>Magnet Hash <input type="text" name="magnet" placeholder="Enter torrent URL."> <button id="load">Load</button></p>

		<p>Magnet Contents: <a href="#" id="contents_toggle">[hide]</a></p>

		<ul id="content"></ul>

		<p>Subtitles: <a href="#" id="subtitles_toggle">[hide]</a></p>

		<ul id="subtitles"></ul>

		<p>Client Magnets:</p>

		<ul id="magnets">
			<li>N/A</li>
		</ul>

		<p>Client Stats:</p>

		<ul id="stats">
			<li>Progress: 0%</li>
			<li>downloadSpeed: 0 Byte/s</li>
			<li>ratio: 0</li>
		</ul>

		<p>Client Errors:</p>

		<ul id="errors">
			<li>N/A</li>
		</ul>

	</body>

	<script>

	$(function() {

		//
		//	1.	Set the base URL
		//
		var api = "{{base_url}}/video";

		//
		//	2.	Check every second if there is a new Magnet file in the client
		//
		client_magnet_list();

		//
		//	3.	Get every second the stats of the client, not individual
		//		torrent.
		//
		check_for_client_stats();

		//
		//	4.	Check every second of there is some errors from the client
		//
		check_for_client_errors();

		//	                  _____   _   _          _
		//	                 / ____| | | (_)        | |
		//	  ___    _ __   | |      | |  _    ___  | | __
		//	 / _ \  | '_ \  | |      | | | |  / __| | |/ /
		//	| (_) | | | | | | |____  | | | | | (__  |   <
		//	 \___/  |_| |_|  \_____| |_| |_|  \___| |_|\_\
		//

		//
		//	React each time an element from the example magnet list is clicked.
		//
		$('#demo_magnets').on('click', '.magnet', function() {

			//
			//	1.	Get the Magnet Hash from the LI element that was clicked.
			//
			var magnet = $(this).text();

			//
			//	2.	Remove the place holder of the input tag. If we don't do
			//		this the interface will look like poop.
			//
			$('input[name="magnet"]').removeAttr('placeholder');

			//
			//	3.	Set the Magnet Hash in the input tag.
			//
			$('input[name="magnet"]').val(magnet)

			//
			//	4.	Once we select a Magnet Hash we immediately load the
			//		content of the magnet so we can select which file do we
			//		want to play.
			//
			load();

		});

		// show\hide content
		$('#contents_toggle').click(function (e) {
			e.preventDefault();

			$('#content').toggle();

			$(this).text($('#content').is(':visible') ? '[hide]' : '[show]');
		})

		// show\hide content
		$('#subtitles_toggle').click(function (e) {
			e.preventDefault();

			$('#subtitles').toggle();

			$(this).text($('#subtitles').is(':visible') ? '[hide]' : '[show]');
		})

		//
		//	Load the content of the Magnet Hash
		//
		$('#load').click(function() {

			//
			//	1.	Load the content
			//
			load();

		});

		//
		//	React each time a file name is clicked from the Magnet Contents UL
		//
		$('#content').on('click', '.file', function() {

			//
			//	1.	Get the Magnet Hash
			//
			var magnet = $('input[name="magnet"]').val();

			//
			//	2.	Get the file name that was clicked
			//
			var file_name = $(this).attr("data-name");

			//
			//	3.	Set the proper SRC of the video player
			//
			$('video').attr('src', api + '/stream/' + magnet + "/" + file_name);


			for (let i = 0; i < $('video')[0].textTracks.length; i++) {
				$('video')[0].textTracks[i].mode = 'showing';
			}

			$.get(api + "/subtitles/" + file_name, function(data) {
				$.each(data.data, function(index, subtitle) {

					subtitle.id;
					subtitle.type;
					subtitle.attributes;
					subtitle.attributes.language;
					subtitle.attributes.release; // name
					subtitle.attributes.url; // URL

					$("#subtitles").append('<li class="file url" data-name="' + subtitle.attributes.release + '"><span class="url">'+ subtitle.attributes.release + ' [' + subtitle.attributes.language + ']</span> <a href="' + subtitle.attributes.url + '" target="_blank">SRC</a></li>');
				})
			});
		});

		//
		//	React to a delete action so we can remove Magnets from the client.
		//	Not that we need this in such basic example, but I did it because
		//	why not :).
		//
		$('#magnets').on('click', '.delete', function() {

			//
			//	1.	Get the Magnet hash.
			//
			var magnet_hash = $(this).parent().attr("data-hash");

			//
			//	2.	Make the right call to the API to remove the Magnet from
			//		the client.
			//
			$.get(api + "/delete/" + magnet_hash, function(data) {

			});

		});

		//	 _    _          _
		//	| |  | |        | |
		//	| |__| |   ___  | |  _ __     ___   _ __   ___
		//	|  __  |  / _ \ | | | '_ \   / _ \ | '__| / __|
		//	| |  | | |  __/ | | | |_) | |  __/ | |    \__ \
		//	|_|  |_|  \___| |_| | .__/   \___| |_|    |___/
		//	                    | |
		//	                    |_|

		//
		//	Load the content of a Magnet so we can see what files are inside
		//	a Magnet.
		//
		function load()
		{
			//
			//	1.	Disable to loading button
			//
			$('#load').prop('disabled', true);

			//
			//	2.	Clear the UL Magnet Contents before appending new data
			//
			$("#content").empty();

			//
			//	3.	Let the user know what to expect
			//
			$("#content").append('<li>Loading...</li>');

			//
			//	4.	Get Magnet hash from the input field
			//
			var magnet = $('input[name="magnet"]').val();

			//
			//	5.	React only if there is a Magnet Has
			//
			if(!magnet)
			{
				return console.error("No Magnet Hash");
			}

			//
			//	6.	Make a request to the API to load the contents of a Magnet
			//		Hash
			//
			$.get(api + '/add/' + magnet, function(data) {

				//
				//	1.	Remove the loading message.
				//
				$("#content").empty();

				//
				//	2.	Loop over the server response and list all the file
				//		inside the Magnet Hash.
				//
				$.each(data, function(index, obj) {

					$("#content").append('<li class="file url" data-name="' + obj.name + '"><span class="url">'+ obj.name + '</span> (' + format_bytes(obj.length, 0) + ') <a href="' + api + '/stream/' + magnet + "/" + obj.name + '">SRC</a></li>');
				})

				//
				//	3.	Re-enable the loading button so the user can maybe past
				//		their own Magnet Hash.
				//
				$('#load').prop('disabled', false);

			});

		}

		//
		// 	Get a list of Magnet Hashes that a client has. This method will be
		// 	executed in a loop every n amount of time to make sure the data
		// 	is nice and fresh.
		//
		function client_magnet_list()
		{
			//
			//	1.	Set a timeout that will be executed after n amount of time
			//
			//setTimeout(function() {

				//
				//	1.	Make a API request to get the contents of the Client
				//
				$.get(api + '/list', function(data) {

					//
					//	1.	Clear the content of the UL
					//
					$("#magnets").empty();

					//
					//	2.	We populate the UL only if we get data from the
					//		server
					//
					if(data.length > 0)
					{
						//
						//	1.	Loop over the array to list all the Magnet
						//		Hashes.
						//
						$.each(data, function(index, obj) {

							$("#magnets").append('<li data-hash="' + obj.hash + '"><span class="magnet">' + obj.hash + '</span> [<span class="delete url">Delete</span>]</li>');

						});
					}
					else
					{
						//
						//	1.	Display Not Available if no data is present
						//
						$("#magnets").append('<li>N/A</li>');
					}

					//
					//	3.	Restart the timer so we keep on checking if there
					//		are new Magnet Hashes
					//

					setTimeout(function() {
						client_magnet_list();
					}, 1000)
				});

			//}, 1000)
		}

		//
		//	Make API request every n amount of time to get the status of the
		//	client so we can get a sense if the data is being downloaded or
		//	not.
		//
		function check_for_client_stats()
		{
			//
			//	1.	Set a timeout that will be executed after n amount of time
			//
			//let checkStats = setTimeout(function() {

				//
				//	1.	Make a request to the API for fresh data.
				//
				$.get(api + '/stats', function(obj) {

					//
					//	1.	Clear the content of the UL so we can refresh it
					//		with new content.
					//
					$("#stats").empty();

					//
					//	2.	Format the response in a meaningful way
					//
					var li = "<li>Progress: " + obj.progress + "%</li>" +
							 "<li>downloadSpeed: " + format_bytes(obj.downloadSpeed, 0) + "/s</li>" +
							 "<li>ratio: " + obj.ratio + "</li>";

					//
					//	3.	Display the stats in the UL
					//
					$("#stats").append(li);


					setTimeout(function() {
						check_for_client_stats();
					}, 2000)
				});

				//
				//	2.	Restart the timer so we keep on checking the status of
				//		the client.
				//
				//check_for_client_stats();

			//}, 1000);
		}

		//
		//	Make API request every n amount of time to see if the client has
		//	some errors worth showing.
		//
		function check_for_client_errors()
		{
			//
			//	1.	Set a timeout that will be executed after N amount of time
			//
			//setTimeout(function() {

				//
				//	1.	Make a request to the server for the data
				//
				$.get(api + '/errors', function(message) {

					//
					//	1.	Display the error only if there is anything to show
					//
					if(message)
					{
						//
						//	1.	Clear the content of the UL
						//
						$("#errors").empty();

						//
						//	2.	Display the error
						//
						$("#errors").append('<li class="error">' + message + '</li>');

					}

					//
					//	2.	Restart the timer so we can update the error
					//		message if there is anything new
					//
					//check_for_client_errors();

					setTimeout(function() {
						check_for_client_errors();
					}, 1000);
				});

			//}, 1000);
		}

		$('#upload_subs').change(function() {
			// upload subs to the server

			let subFileNames = [];
			let subList = '';
			for (let i = 0; i < this.files.length; ++i) {
				subList += '<li>' + this.files.item(i).name + ' [' + (this.files.item(i).size/1024).toFixed(2) + ' KB]</li>'

				subFileNames.push(this.files.item(i).name);
			}

			$('#uploaded_subs').html(subList)


			$.ajax({
				url: api + '/upload',
				type: "POST",
				data:  new FormData($(this).parent()[0]),
				contentType: false,
				cache: false,
				processData:false,
				beforeSend : function()
				{
					$("#upload_processing").text('Uploading...');
				},
				success: function(data)
				{
					$("#upload_processing").text('Successfully uploaded');

					// remove prev tracks
					$('video track').remove()

					for (let i = 0; i < subFileNames.length; i++) {
						let vttSubFileName = subFileNames[i].replace('.srt', '.vtt');

						let track = '<track ' +
								'label="English' + i + '" ' +
								'kind="subtitles" ' +
								'srcLang="en' + i + '" ' +
								'src="subtitles/' + vttSubFileName + '" ' +
								'default />'

						$('video').append(track);

						$('video')[0].textTracks[i].mode = 'showing';
					}
				},
				error: function(e)
				{
					$("#upload_processing").html('Error!')
				}
			});
		})

	});

	//
	//	Convert bytes to a human readable form
	//
	function format_bytes(bytes, decimals)
	{
		//
		//	If the size is 0, then we can stop right away.
		//
		if(bytes == 0)
		{
			return '0 Byte';
		}

		//
		//	Convert bytes to kilobytes
		//
		var k = 1024;

		//
		//	Set how many position after decimal to show
		//
		var dm = decimals + 1 || 3;

		//
		//	Array with all the possible formats.
		//
		var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

		//
		//
		//
		var i = Math.floor(Math.log(bytes) / Math.log(k));

		//
		//
		//
		return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
	}

	</script>

</html>